server:
  port: 8087

spring:
  application:
    name: ms-cart

  data:
    redis:
      host: ${REDIS_HOST:localhost}
      port: ${REDIS_PORT:6379}
      # se tiver senha no Redis, exporte REDIS_PASSWORD
      # EN: if your Redis has a password, export REDIS_PASSWORD
      password: ${REDIS_PASSWORD:}

  cache:
    # opcional: se você habilitar um cache de totais/snapshots no CacheConfig
    # EN: optional: if you enable a totals/snapshots cache in CacheConfig
    type: redis
    redis:
      time-to-live: 10m
      cache-null-values: false

springdoc:
  api-docs:
    path: /v3/api-docs
  swagger-ui:
    path: /swagger-ui.html
    operationsSorter: method
    tagsSorter: alpha
    tryItOutEnabled: true

logging:
  level:
    org.springframework.data.redis: info
    br.com.orbity: info

# ===== Propriedades específicas do ms-cart =====
# EN: ===== ms-cart specific properties =====
cart:
  key-prefix: ${CART_KEY_PREFIX:cart}
  ttl:
    seconds: ${CART_TTL_SECONDS:86400}        # 24h
    # EN: 24 hours
  redis:
    host: ${REDIS_HOST:localhost}
    port: ${REDIS_PORT:6379}
    password: ${REDIS_PASSWORD:}

  # ===== Kafka centralizado (Opção B) =====
  # EN: ===== Centralized Kafka (Option B) =====
  kafka:
    enabled: ${CART_KAFKA_ENABLED:true}   # habilita/desabilita integração Kafka
    # EN: toggles Kafka integration on/off

    # Lista de brokers Kafka (host:port)
    # EN: list of Kafka brokers (host:port)
    bootstrap-servers: ${KAFKA_BOOTSTRAP_SERVERS:127.0.0.1:9094}

    # Identidade do cliente
    # EN: client identity
    client-id: ${CART_KAFKA_CLIENT_ID:ms-cart}

    admin:
      # Criação de tópicos no startup (desligue se usar IaC)
      # EN: create topics on startup (disable if using IaC)
      auto-create-topics: ${CART_KAFKA_ADMIN_AUTO_CREATE_TOPICS:true}
      default-partitions: ${CART_KAFKA_ADMIN_DEFAULT_PARTITIONS:1}
      default-replication-factor: ${CART_KAFKA_ADMIN_DEFAULT_REPLICATION:1}

    producer:
      # Confiabilidade / performance
      # EN: reliability / performance
      acks: ${CART_KAFKA_PRODUCER_ACKS:all}
      retries: ${CART_KAFKA_PRODUCER_RETRIES:3}
      batch-size: ${CART_KAFKA_PRODUCER_BATCH_SIZE:16384}
      linger-ms: ${CART_KAFKA_PRODUCER_LINGER_MS:5}
      compression-type: ${CART_KAFKA_PRODUCER_COMPRESSION:lz4}

      # Serializers (compatíveis com o KafkaTemplate<String, Object>)
      # EN: serializers (compatible with KafkaTemplate<String, Object>)
      key-serializer: ${CART_KAFKA_PRODUCER_KEY_SERIALIZER:org.apache.kafka.common.serialization.StringSerializer}
      value-serializer: ${CART_KAFKA_PRODUCER_VALUE_SERIALIZER:org.springframework.kafka.support.serializer.JsonSerializer}

      # Hardening JSON / Exactly-once (quando aplicável)
      # EN: JSON hardening / Exactly-once (when applicable)
      add-type-headers: ${CART_KAFKA_PRODUCER_JSON_ADD_TYPE_HEADERS:false}
      idempotence: ${CART_KAFKA_PRODUCER_IDEMPOTENCE:true}
      max-in-flight-per-conn: ${CART_KAFKA_PRODUCER_MAX_IN_FLIGHT:1}
      delivery-timeout-ms: ${CART_KAFKA_PRODUCER_DELIVERY_TIMEOUT_MS:120000}

    topics:
      # Nomes dos tópicos de eventos do Cart
      # EN: Cart event topic names
      updated: ${CART_UPDATED_TOPIC:cart.updated.v1}
      merged: ${CART_MERGED_TOPIC:cart.merged.v1}

# PROFILE: secured  → habilita OAuth2 Resource Server (Keycloak)
# EN: PROFILE: secured → enables OAuth2 Resource Server (Keycloak)
# Ative com:  -Dspring.profiles.active=secured
# EN: Enable with: -Dspring.profiles.active=secured
---
spring:
  config:
    activate:
      on-profile: secured
  security:
    oauth2:
      resourceserver:
        jwt:
          issuer-uri: ${OAUTH2_ISSUER_URI:http://localhost:8085/realms/master}
          # jwk-set-uri: ${OAUTH2_JWKS_URI:http://localhost:8085/realms/master/protocol/openid-connect/certs}
          # EN: jwk-set-uri: ${OAUTH2_JWKS_URI:http://localhost:8085/realms/master/protocol/openid-connect/certs}
