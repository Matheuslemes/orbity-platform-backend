server:
  port: 8082

spring:
  application:
    name: ms-inventory

  datasource:
    url: ${POSTGRES_URL:jdbc:postgresql://localhost:5432/inventory}
    username: ${POSTGRES_USER:postgres}
    password: ${POSTGRES_PASSWORD:postgres}
    driver-class-name: org.postgresql.Driver

  jpa:
    hibernate:
      ddl-auto: none
    properties:
      hibernate:
        jdbc.lob.non_contextual_creation: true
        format_sql: false
    open-in-view: false

  flyway:
    enabled: true
    # schemas/tables serão criados a partir de resources/db/migration
    locations: classpath:db/migration

  data:
    redis:
      host: ${REDIS_HOST:localhost}
      port: ${REDIS_PORT:6379}

  cache:
    type: redis
    redis:
      time-to-live: 10m
      cache-null-values: false

  kafka:
    bootstrap-servers: ${KAFKA_BOOTSTRAP_SERVERS:127.0.0.1:9094}
    admin:
      auto-create: true
    consumer:
      group-id: ${KAFKA_GROUP_ID:ms-inventory}
      # Usaremos ack manual no listener
      enable-auto-commit: false
      # properties:
      #   spring.json.trusted.packages: "*"
    producer:
      # Serializers também são configurados pelo KafkaConfig (Bean), mas deixamos explícito:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer

# mapas de tópicos (mantém prefixo 'orbity.kafka.*' como no projeto)
orbity:
  kafka:
    producer:
      topic-key: stock-events
      topics:
        stock-events:
          name: ${STOCK_EVENTS_TOPIC:inventory.stock.events.v1}
          partitions: 1
          replicas: 1
    consumer:
      topic-key: order-events
      topics:
        order-events:
          name: ${ORDER_EVENTS_TOPIC:orders.stock.commands.v1}
          concurrency: ${ORDER_EVENTS_CONCURRENCY:1}

# suporte ao TopicAdminConfig (auto-criar tópicos via propriedade simples)
app:
  kafka:
    topics:
      auto-create: ${TOPIC_AUTO_CREATE:true}
      stock-events: ${STOCK_EVENTS_TOPIC:inventory.stock.events.v1}
      order-events: ${ORDER_EVENTS_TOPIC:orders.stock.commands.v1}

# propriedades específicas do inventory
inventory:
  snapshot:
    enabled: true
    # a cada 30 minutos
    cron: "0 */30 * * * *"
    threshold: ${SNAPSHOT_THRESHOLD:100}

springdoc:
  api-docs:
    path: /v3/api-docs
  swagger-ui:
    path: /swagger-ui.html
    operationsSorter: method
    tagsSorter: alpha
    tryItOutEnabled: true

logging:
  level:
    org.hibernate.SQL: warn
    org.springframework.kafka: info
    org.springframework.data.redis: info
    br.com.orbity.ms_inventory_service: info

# PROFILE: secured → habilita OAuth2 Resource Server (Keycloak)
# Ative com: -Dspring.profiles.active=secured
---
spring:
  config:
    activate:
      on-profile: secured
  security:
    oauth2:
      resourceserver:
        jwt:
          issuer-uri: ${OAUTH2_ISSUER_URI:http://localhost:8085/realms/master}
          # jwk-set-uri: ${OAUTH2_JWKS_URI:http://localhost:8085/realms/master/protocol/openid-connect/certs}
