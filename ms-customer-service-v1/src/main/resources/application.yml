server:
  port: 8090

spring:
  application:
    name: ms-customer

  datasource:
    url: ${POSTGRES_URL:jdbc:postgresql://localhost:5432/customer}
    username: ${POSTGRES_USER:postgres}
    password: ${POSTGRES_PASSWORD:postgres}
    driver-class-name: org.postgresql.Driver

  jpa:
    hibernate:
      ddl-auto: none
    properties:
      hibernate:
        jdbc.lob.non_contextual_creation: true
        format_sql: false
    open-in-view: false

  flyway:
    enabled: true
    locations: classpath:db/migration

  data:
    redis:
      host: ${REDIS_HOST:localhost}
      port: ${REDIS_PORT:6379}

  cache:
    # defina para "redis" se quiser habilitar cache (RedisConfig é condicional)
    # EN: set to "redis" if you want to enable caching (RedisConfig is conditional)
    type: ${SPRING_CACHE_TYPE:none}
    redis:
      time-to-live: 10m
      cache-null-values: false

  kafka:
    bootstrap-servers: ${KAFKA_BOOTSTRAP_SERVERS:127.0.0.1:9094}
    admin:
      auto-create: true
    consumer:
      group-id: ${KAFKA_GROUP_ID:ms-customer}
      enable-auto-commit: false
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      # properties:
      # EN: properties:
      #   spring.json.trusted.packages: "*"
      #   EN: spring.json.trusted.packages: "*"
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer

# mapas de tópicos (prefixo 'orbity.kafka.*')
# EN: topic maps (prefix 'orbity.kafka.*')
orbity:
  kafka:
    producer:
      topic-key: customer-events
      topics:
        customer-events:
          name: ${CUSTOMER_EVENTS_TOPIC:customer.events.v1}
          partitions: 1
          replicas: 1
    consumer:
      # exemplo opcional de consumer (caso use eventos do IdP)
      # EN: optional example consumer (if you use IdP events)
      topic-key: idp-events
      topics:
        idp-events:
          name: ${IDP_EVENTS_TOPIC:idp.user.events.v1}
          concurrency: ${IDP_EVENTS_CONCURRENCY:1}

# suporte ao TopicAdminConfig (auto-criar tópicos via propriedade simples)
# EN: support for TopicAdminConfig (auto-create topics via simple property)
app:
  kafka:
    topics:
      auto-create: ${TOPIC_AUTO_CREATE:true}
      customer-events: ${CUSTOMER_EVENTS_TOPIC:customer.events.v1}
      idp-events: ${IDP_EVENTS_TOPIC:idp.user.events.v1}

# propriedades específicas do customer
# EN: customer-specific properties
customer:
  outbox:
    # intervalo do scheduler OutboxPublisherJob
    # EN: interval for the OutboxPublisherJob scheduler
    poll-interval-ms: ${OUTBOX_POLL_INTERVAL_MS:1500}

springdoc:
  api-docs:
    path: /v3/api-docs
  swagger-ui:
    path: /swagger-ui.html
    operationsSorter: method
    tagsSorter: alpha
    tryItOutEnabled: true

logging:
  level:
    org.hibernate.SQL: warn
    org.springframework.kafka: info
    org.springframework.data.redis: info
    br.com.orbity.customer: info

# PROFILE: secured → habilita OAuth2 Resource Server (Keycloak)
# EN: PROFILE: secured → enables OAuth2 Resource Server (Keycloak)
# Ative com: -Dspring.profiles.active=secured
# EN: Enable with: -Dspring.profiles.active=secured
---
spring:
  config:
    activate:
      on-profile: secured
  security:
    oauth2:
      resourceserver:
        jwt:
          issuer-uri: ${OAUTH2_ISSUER_URI:http://localhost:8085/realms/master}
          # jwk-set-uri: ${OAUTH2_JWKS_URI:http://localhost:8085/realms/master/protocol/openid-connect/certs}
          # EN: jwk-set-uri: ${OAUTH2_JWKS_URI:http://localhost:8085/realms/master/protocol/openid-connect/certs}
